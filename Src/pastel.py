import os, sys, re, getopt

def display_help():
    print ("Script usage:")
    print ("python pastel.py")

CONFIG_ROW_WIDTH = 10
CONFIG_PASTEL_HEADER='pastel.h'
CONFIG_DEFAULT_TARGET='pastel_data.cpp'

MACRO_DECL='COMPILE_IN_DATA_FILE'
MACRO_REG=r'^%(macro)s\((.*),\"(.*)\"\);$' % {'macro' : MACRO_DECL}

LICENSE="// I'm having an actual license, how adult of me"

HEADER="""// I'm having an actual license, how adult of me
#ifndef PASTEL_DATA_BUNDLE
#define PASTEL_DATA_BUNDLE
struct DataBundle
{
    const char* name;
    const unsigned char* data;
    const unsigned int size;
};
#endif

#ifndef %(macro)s
#define %(macro)s(name, path) extern DataBundle name
#endif
""" % {'macro' : MACRO_DECL}

run_config = {
    'gen_header': False,
    'source_files': [],
    'target_file_name': CONFIG_DEFAULT_TARGET,
    'verbose': False
}

def parse_options_and_args(args):
    options, arguments = getopt.getopt(args, 'vs:t:', ['generate_header'])
    return (options, arguments)

def opt_parse(options, arguments):
    conf = {
        'gen_header': False,
        'source_files': [],
        'target_file_name': CONFIG_DEFAULT_TARGET,
        'verbose': False
    }

    for opt in options:
        if opt[0] == '-v':
            conf['verbose'] = True
        if opt[0] == '-s':
            if opt[1] != '':
                conf['source_files'].append(opt[1])
        if opt[0] == '-t':
            if opt[1] != '':
                conf['target_file_name'] = opt[1]
        if opt[0] == '--generate_header':
            conf['gen_header'] = True

    return conf

def write_symbol(symbol_name, symbol_data, target_file):
    target_file.write("unsigned char %(name)s_data[] = {\n" % {'name' : symbol_name})

    current_column = 0
    for byte in symbol_data:
        target_file.write("0x%(b)X," % {'b' : byte})
        current_column += 1
        if current_column >= CONFIG_ROW_WIDTH:
            current_column = 0
            target_file.write("\n")

    target_file.write("};\n")

    target_file.write("DataBundle %(name)s = {\"%(name)s\", %(name)s_data, %(data_size)d};" % {'name' : symbol_name, 'data_size': len(symbol_data)})

def write_header(target_file):
    target_file.write(HEADER)

def read_whole_file(path):
    with open(path, 'rb') as f:
        return f.read()

def main():
    args = sys.argv[1:len(sys.argv)]
    optargs = parse_options_and_args(args)
    run_config = opt_parse(optargs[0], optargs[1])

    verbose = run_config['verbose']

    if verbose:
        print ('Running with config')
        print (run_config)

    if verbose:
        print ("Source files: " + str(run_config['source_files']))
        print ('Source file: %(src_file)s' % {'src_file': run_config['source_files'][0]})

    cpp_src = run_config['source_files'][0]

    if verbose:
        print ('Data target file: %(t_file)s' % {'t_file': run_config['target_file_name']})
    data_file_name = run_config['target_file_name']

    if run_config['gen_header']:
        if verbose:
            print ('Generating header file')
        header_file = open(CONFIG_PASTEL_HEADER, 'w')
        header_file.write(HEADER)
        header_file.close()

    matches = [re.findall(MACRO_REG, line.replace(' ', '')) for line in open(cpp_src)]

    data_file = open(data_file_name, 'w')
    data_file.write(LICENSE + "\n")
    data_file.write("// This is a data file generated by pastel.py DO NOT MODIFY\n")
    data_file.write("#include \"%(header)s\"\n" % {'header': CONFIG_PASTEL_HEADER})

    for m in matches:
        if (len(m) != 0):
            if verbose:
                print ("Var name: %s" % m[0][0])
                print ("File name: %s" % m[0][1])

            file_contents = read_whole_file(m[0][1])

            write_symbol(m[0][0], file_contents, data_file)

if __name__ == "__main__":
    main()
