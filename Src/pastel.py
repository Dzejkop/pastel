import os, sys, re, getopt

def display_help():
    print ("Script usage:")
    print ("python pastel.py")

CONFIG_ROW_WIDTH = 10
CONFIG_PASTEL_HEADER='pastel.h'

MACRO_DECL='COMPILE_IN_DATA_FILE'
MACRO_REG=r'^%(macro)s\((.*),\"(.*)\"\);$' % {'macro' : MACRO_DECL}

LICENSE="// I'm having an actual license, how adult of me"

HEADER="""// I'm having an actual license, how adult of me
#ifndef PASTEL_DATA_BUNDLE
#define PASTEL_DATA_BUNDLE
struct DataBundle
{
const char* name;
const unsigned char* data;
const unsigned int size;
};
#endif

#ifndef %(macro)s
#define %(macro)s(name, path) extern DataBundle name
#endif
"""

def write_symbol(symbol_name, symbol_data, target_file):
    target_file.write("unsigned char %(name)s_data[] = {\n" % {'name' : symbol_name})

    current_column = 0
    for byte in symbol_data:
        target_file.write("0x%(b)X," % {'b' : byte})
        current_column += 1
        if current_column >= CONFIG_ROW_WIDTH:
            current_column = 0
            target_file.write("\n")

    target_file.write("};\n")

    target_file.write("DataBundle %(name)s = {\"%(name)s\", %(name)s_data, %(data_size)d};" % {'name' : symbol_name, 'data_size': len(symbol_data)})

def write_header(target_file):
    target_file.write(HEADER % {'macro' : MACRO_DECL})

def read_whole_file(path):
    with open(path, 'rb') as f:
        return f.read()

if len(sys.argv) != 3:
    print ("Invalid number of arguments.")
    print ("Expected 2 arguments the .cpp source file and target .s file.")

cpp_src = sys.argv[1]
data_file_name = sys.argv[2]

matches = [re.findall(MACRO_REG, line.replace(' ', '')) for line in open(cpp_src)]

data_file = open(data_file_name, 'w')
data_file.write(LICENSE + "\n")
data_file.write("// This is a data file generated by paste.py DO NOT MODIFY\n")
data_file.write("#include \"%(header)s\"\n" % {'header': CONFIG_PASTEL_HEADER})

for m in matches:
    if (len(m) != 0):
        print ("Var name: %s" % m[0][0])
        print ("File name: %s" % m[0][1])

        file_contents = read_whole_file(m[0][1])

        write_symbol(m[0][0], file_contents, data_file)
